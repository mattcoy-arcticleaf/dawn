{{ 'component-card.css' | asset_url | stylesheet_tag }}
{{ 'component-price.css' | asset_url | stylesheet_tag }}

{{ 'component-slider.css' | asset_url | stylesheet_tag }}
{{ 'template-collection.css' | asset_url | stylesheet_tag }}

{% if section.settings.image_shape == 'blob' %}
  {{ 'mask-blobs.css' | asset_url | stylesheet_tag }}
{%- endif -%}

{%- if section.settings.enable_quick_add -%}
  {{ 'quick-add.css' | asset_url | stylesheet_tag }}
  <script src="{{ 'quick-add.js' | asset_url }}" defer="defer"></script>
  <script src="{{ 'product-form.js' | asset_url }}" defer="defer"></script>
{%- endif -%}

{%- style -%}
  .section-{{ section.id }}-padding {
    {% if section.settings.padding_top > 100 %}
      padding-top: {{ section.settings.padding_top | divided_by: 2 | round: 0 }}px;
    {% else %}
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    {% endif %}
    {% if section.settings.padding_bottom > 100 %}
      padding-bottom: {{ section.settings.padding_bottom | divided_by: 2 | round: 0 }}px;
    {% else %}
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
    {% endif %}
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
{%- endstyle -%}

{%- liquid
  assign products_to_display = section.settings.products_to_show
  assign show_mobile_slider = section.settings.swipe_on_mobile
  assign show_desktop_slider = section.settings.enable_desktop_slider
-%}

{% if section.settings.recent_review %}
<div class="recently-products color-{{ section.settings.color_scheme }} isolate gradient products-slider {{ section.settings.custom_class }}">
  <div class="recently-viewed-wrapper section-{{ section.id }}-padding{% if section.settings.full_width %} collection--full-width{% endif %} hidden">
    {% if section.settings.title_align == 'center' %}
      <div class="collection__title title-wrapper title-wrapper--no-top-margin page-widths{% if show_mobile_slider %} title-wrapper--self-padded-tablet-down{% endif %}{% if show_desktop_slider %} collection__title--desktop-slider{% endif %} container-fluid">
        {%- if section.settings.title != blank -%}
          <h2 class="title inline-richtext {% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}">
            {{ section.settings.title }}
          </h2>
        {%- endif -%}
      </div>
    {%- endif -%}
    {% if section.settings.desktop_slider_page_width %}
      <div class="page-widths">
    {% endif %}
    <slider-component class="slider-mobile-gutter{% if section.settings.full_width %} slider-component-full-width{% endif %}{% if show_mobile_slider == false %} page-widths{% endif %}{% if show_desktop_slider == false and section.settings.full_width == false %} page-width-desktops{% endif %}{% if show_desktop_slider %} slider-component-desktop {% if section.settings.desktop_slider_page_width %} slider-component-desktop-page-width {% endif %}{% endif %}{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %} container-fluid">
      {% if section.settings.title_align == 'left' %}
        <div class="collection__title title-wrapper title_align-left title-wrapper--no-top-margin {% if show_mobile_slider %} title-wrapper--self-padded-tablet-down{% endif %}{% if show_desktop_slider %} collection__title--desktop-slider{% endif %}">
          {%- if section.settings.title != blank -%}
            <h2 class="title inline-richtext {{ section.settings.heading_size }}{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}">
              {{ section.settings.title }}
            </h2>
          {%- endif -%}
        </div>
      {%- endif -%}

      <ul
        id="Slider-{{ section.id }}"
        class="grid product-grid contains-card contains-card--product{% if settings.card_style == 'standard' %} contains-card--standard{% endif %} grid--{{ section.settings.columns_desktop }}-col-desktop{% if section.settings.collection == blank %} grid--{{ section.settings.columns_mobile }}-col-tablet-down{% else %} grid--{{ section.settings.columns_mobile }}-col-tablet-down{% endif %}{% if show_mobile_slider or show_desktop_slider %} slider{% if show_desktop_slider %} slider--desktop{% endif %}{% if show_mobile_slider %} slider--tablet grid--peek{% endif %}{% endif %}"
        role="list"
        aria-label="{{ 'general.slider.name' | t }}"
      >
        {% for i in (1..products_to_display) %}
          <li
            id="Slide-{{ section.id }}-{{ forloop.index }}"
            class="grid__item{% if show_mobile_slider or show_desktop_slider %} slider__slide{% endif %}{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}"
            {% if settings.animations_reveal_on_scroll %}
              data-cascade
              style="--animation-order: {{ forloop.index }};"
            {% endif %}
          ></li>
        {% endfor %}
        <!-- Recently viewed products will appear here -->
      </ul>
      {%- if show_mobile_slider or show_desktop_slider -%}
        <div class="slider-buttons no-js-hidden">
          <button
            type="button"
            class="slider-button slider-button--prev"
            name="previous"
            aria-label="{{ 'general.slider.previous_slide' | t }}"
            aria-controls="recently-viewed-grid"
          >
            {% comment %} {% render 'icon-caret' %} {% endcomment %}
          </button>
          <button
            type="button"
            class="slider-button slider-button--next"
            name="next"
            aria-label="{{ 'general.slider.next_slide' | t }}"
            aria-controls="recently-viewed-grid"
          >
            {% comment %} {% render 'icon-caret' %} {% endcomment %}
          </button>
        </div>
      {%- endif -%}
    </slider-component>
    {% if section.settings.desktop_slider_page_width %}
      </div>
    {% endif %}
  </div>
</div>
{% endif %}
<script>
  function setRecentlyViewedProducts() {
      const productData = {
        productId: "{{ product.id }}",
        productTitle: "{{ product.title }}",
        productImg: "{{ product.featured_media | img_url: '300x' }}",
        productPrice: "{{ product.price | money }}",
        productUrl: "{{ product.url }}"
      };
      const productList = [];
      let jsonResp, jsonRespArr, jsonRespArrStr;
      const numberOfProducts = 26;
      productList.push(productData);
      const currProductPageTitle = productData.productTitle;
      const productDataString = JSON.stringify(productList);
      const localData = localStorage.getItem("recentlyViewedProduct");

      if (localData === null) {
        localStorage.setItem("recentlyViewedProduct", productDataString);
      } else if (localData) {
        const oldProductData = localStorage.getItem("recentlyViewedProduct");
        const countProductData = (oldProductData.match(/productTitle/g) || []).length;
        const sameProduct = oldProductData.includes(currProductPageTitle);
        if (countProductData < numberOfProducts && sameProduct == false) {
          jsonResp = JSON.parse(oldProductData);
          jsonRespArr = jsonResp.concat(productList);
          jsonRespArrStr = JSON.stringify(jsonRespArr);
          localStorage.setItem("recentlyViewedProduct", jsonRespArrStr);
        } else if (countProductData >= numberOfProducts && sameProduct == false) {
          jsonResp = JSON.parse(oldProductData);
          jsonResp.shift();
          jsonRespArr = jsonResp.concat(productList);
          jsonRespArr = JSON.stringify(jsonRespArr);
          localStorage.setItem("recentlyViewedProduct", jsonRespArr);
        }
      }
    }
    const localViewed = localStorage.recentlyViewedProduct;
    var currentProductId = null;

    {%- if template contains 'product' -%}
      var currentProductId = '{{ product.id }}';
      setRecentlyViewedProducts();
      // console.log('setRecentlyViewedProducts');
    {% else %}
      // console.log('not setRecentlyViewedProducts');
    {% endif %}
    function getRecentlyViewedProducts() {
      let productData;
      try {
        productData = JSON.parse(localStorage.getItem("recentlyViewedProduct")) || [];
      } catch (e) {
        console.error("Failed to parse recentlyViewedProduct:", e);
        productData = [];
      }
      {%- if template contains 'product' -%}
        productData = productData.filter(product => product.productId !== currentProductId);
      {% endif %}
      if(productData !== null){
        const limitedURLs = productData.slice(0, {{ products_to_display }});
        const targetElement = document.getElementById('Slider-{{ section.id }}');
        if (!targetElement) {
          // console.warn('targetElement not found');
          return;
        }
        function loadProducts() {
          const listItems = targetElement.querySelectorAll('li');
          const promises = limitedURLs.map((productData, ix) => {
            return fetch(productData.productUrl + '?view=recent-product-card')
              .then(response => response.text())
              .then(html => {
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');
                const card = doc.querySelector('.recent-product-card');
                if (!listItems[ix] || !card) {
                  // Optionally log a warning here
                  return null;
                }
                listItems[ix].appendChild(card);
                return card;
              });
          });

          Promise.all(promises).then(() => {
            if(targetElement){
              const listItems = targetElement.querySelectorAll('li');
              for (let i = listItems.length - 1; i >= 0; i--) {
                if (listItems[i].innerHTML.trim() === '') {
                  //listItems[i].parentNode.removeChild(listItems[i]);
                }
              }
              if(targetElement.querySelectorAll('li').length > 0){
                targetElement.closest('.recently-viewed-wrapper').classList.remove('hidden');          
              }
            }
          }).catch(error => console.error('Error loading products:', error));
        }
        loadProducts();
      } else {
        // console.log('productData null');  
      }
    }

    document.addEventListener("DOMContentLoaded", function (event) {
     getRecentlyViewedProducts();
    });
    document.addEventListener('shopify:section:select', function (event) {
      // console.log('shopify:section:select');
       getRecentlyViewedProducts();
    });
</script>
{% schema %}
{
  "name": "Recently Viewed Products",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "checkbox",
      "id": "recent_review",
      "default": false,
      "label": "Display Recently Reveiwed Products"
    },
    {
      "type": "inline_richtext",
      "id": "title",
      "default": "Recently Viewed Products",
      "label": "t:sections.featured-collection.settings.title.label"
    },
    {
      "type": "select",
      "id": "heading_size",
      "options": [
        {
          "value": "h2",
          "label": "t:sections.all.heading_size.options__1.label"
        },
        {
          "value": "h1",
          "label": "t:sections.all.heading_size.options__2.label"
        },
        {
          "value": "h0",
          "label": "t:sections.all.heading_size.options__3.label"
        }
      ],
      "default": "h1",
      "label": "t:sections.all.heading_size.label"
    },
    {
      "type": "select",
      "label": "Title align",
      "id": "title_align",
      "default": "center",
      "options": [
        {
          "label": "Left",
          "value": "left"
        },
        {
          "label": "Center",
          "value": "center"
        }
      ]
    },
    {
      "type": "range",
      "id": "products_to_show",
      "min": 2,
      "max": 25,
      "step": 1,
      "default": 4,
      "label": "t:sections.featured-collection.settings.products_to_show.label"
    },
    {
      "type": "range",
      "id": "columns_desktop",
      "min": 1,
      "max": 5,
      "step": 1,
      "default": 4,
      "label": "t:sections.featured-collection.settings.columns_desktop.label"
    },
    {
      "type": "checkbox",
      "id": "full_width",
      "label": "t:sections.featured-collection.settings.full_width.label",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "enable_desktop_slider",
      "label": "t:sections.featured-collection.settings.enable_desktop_slider.label",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "desktop_slider_page_width",
      "label": "t:sections.featured-collection.settings.desktop_slider_page_width.label",
      "default": false
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.all.colors.label",
      "info": "t:sections.all.colors.has_cards_info",
      "default": "background-1"
    },
    {
      "type": "header",
      "content": "t:sections.featured-collection.settings.header_mobile.content"
    },
    {
      "type": "select",
      "id": "columns_mobile",
      "default": "2",
      "label": "t:sections.featured-collection.settings.columns_mobile.label",
      "options": [
        {
          "value": "1",
          "label": "t:sections.featured-collection.settings.columns_mobile.options__1.label"
        },
        {
          "value": "2",
          "label": "t:sections.featured-collection.settings.columns_mobile.options__2.label"
        }
      ]
    },
    {
      "type": "checkbox",
      "id": "swipe_on_mobile",
      "default": false,
      "label": "t:sections.featured-collection.settings.swipe_on_mobile.label"
    },
    {
      "type": "text",
      "id": "custom_class",
      "label": "Custom class"
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 160,
      "step": 2,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 160,
      "step": 2,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    }
  ],
  "presets": [
    {
      "name": "Recently Viewed Products"
    }
  ]
}
{% endschema %}
